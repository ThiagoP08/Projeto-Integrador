/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.13
 * Generated at: 2023-09-23 19:13:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import service.EventoService;
import service.UserService;
import service.AdminService;
import model.Evento;
import model.User;
import model.Admin;
import java.util.List;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("service.AdminService");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model.Admin");
    _jspx_imports_classes.add("service.UserService");
    _jspx_imports_classes.add("model.User");
    _jspx_imports_classes.add("service.EventoService");
    _jspx_imports_classes.add("model.Evento");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Teste</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h1> Listar Evento </h1>\r\n");
      out.write("	\r\n");
      out.write("	");

		EventoService service = new EventoService();
	
		List<Evento> lista = service.listarEventos();
		
		out.println("<table style='margin-bottom: 2rem; border: solid 2px'>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> ID </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Titulo </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Descrição </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Tipo </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Min. Lot. </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Max. Lot. </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Status </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Min. Idade </th>");
		out.println("<th style='width: 10%; border-bottom: solid 1px'> Data do Evento </th>");

	for(Evento evento: lista) {
		out.println("<tr>");
			out.println("<td>" + evento.getId() + "</td>");
			out.println("<td>" + evento.getTitulo() + "</td>");
			out.println("<td>" + evento.getDescricao() + "</td>");
			out.println("<td>" + evento.getTipo() + "</td>");
			out.println("<td>" + evento.getMin_lotacao() + "</td>");
			out.println("<td>" + evento.getMax_lotacao() + "</td>");
			out.println("<td>" + evento.getStatus() + "</td>");
			out.println("<td>" + evento.getMin_idade() + "</td>");
			out.println("<td>" + evento.getData_evento() + "</td>");
		out.println("</tr>");
	}
	
	out.println("</table>");
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<h1> Listar Users </h1>\r\n");
      out.write("	\r\n");
      out.write("	");

		UserService service2 = new UserService();
	
		List<User> lista2 = service2.listarUsers();
	
		out.println("<table style='margin-bottom: 2rem; border: solid 2px'>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> ID </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Email </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Senha </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Nome </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Data de Nasc. </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> CPF </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Endereço </th>");
		out.println("<th style='width: 10%; border-bottom: solid 1px'> Admin? </th>");

		for(User user: lista2) {
			out.println("<tr>");
				out.println("<td>" + user.getId() + "</td>");
				out.println("<td>" + user.getEmail() + "</td>");
				out.println("<td>" + user.getSenha() + "</td>");
				out.println("<td>" + user.getNome() + "</td>");
				out.println("<td>" + user.getDtNascimento() + "</td>");
				out.println("<td>" + user.getCpf() + "</td>");
				out.println("<td>" + user.getEndereco() + "</td>");
				out.println("<td>" + user.getStatus_admin() + "</td>");
			out.println("</tr>");
		}

		out.println("</table>");
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("		<h1> Listar Admins </h1>\r\n");
      out.write("	\r\n");
      out.write("	");

		AdminService service3 = new AdminService();
	
		List<Admin> lista3 = service3.listarAdmins();
	
		out.println("<table style='margin-bottom: 2rem; border: solid 2px'>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> ID </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> CNPJ </th>");
		out.println("<th style='width: 10%; border-right: solid 1px; border-bottom: solid 1px'> Status </th>");
		out.println("<th style='width: 10%; border-bottom: solid 1px'> ID do Evento </th>");

		for(Admin admin: lista3) {
			out.println("<tr>");
				out.println("<td>" + admin.getId() + "</td>");
				out.println("<td>" + admin.getCnpj() + "</td>");
				out.println("<td>" + admin.getStatus() + "</td>");
				out.println("<td>" + admin.getEvento_id() + "</td>");
			out.println("</tr>");
		}

		out.println("</table>");
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
